package main

import (
	"reflect"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

func tst(pieces [6][6][6]int) bool {
	solution := SolveSnafooz(pieces)
	if len(solution) != 6 {
		print("Expected length to be 6 but was", len(solution))
		return false
	}
	return reflect.DeepEqual(solution, pieces)
}

func doTestRotate(b [6][6]int, exp [6][6]int) {
	var ans = RotateSide(b)
	Expect(ans).To(Equal(exp))
}

func doTestRotateTwice(b [6][6]int, exp [6][6]int) {
	var ans = RotateSide(RotateSide(b))
	Expect(ans).To(Equal(exp))
}

func doTestMirror(b [6][6]int, exp [6][6]int) {
	var ans = MirrorSide(b)
	Expect(ans).To(Equal(exp))
}

var _ = Describe("snafooz cube puzzle", func() {
	It("example puzzle1", func() {
		pieces := [6][6][6]int{{{0, 0, 1, 1, 0, 0},
			{0, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 0},
			{0, 1, 1, 1, 1, 0},
			{1, 1, 1, 1, 1, 1},
			{1, 0, 1, 0, 1, 1}},

			{{0, 1, 0, 0, 1, 1},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 0, 1, 1, 0, 1}},

			{{0, 0, 1, 1, 0, 1},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 0, 1, 1, 0, 0}},

			{{0, 0, 1, 1, 0, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{0, 1, 0, 0, 1, 0}},

			{{0, 0, 1, 1, 0, 1},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 0, 0, 1, 1}},

			{{0, 0, 1, 1, 0, 0},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 0, 0, 1, 0}}}

		Expect(tst(pieces)).To(Equal(true))
	})

	It("should check edges matches", func() {
		tables := []struct {
			a [6]int
			b [6]int
			x bool
		}{
			{[6]int{1, 0, 1, 0, 0, 1}, [6]int{0, 1, 1, 1, 1, 0}, false},
			{[6]int{1, 1, 1, 1, 1, 0}, [6]int{1, 1, 1, 1, 1, 0}, false},
			{[6]int{0, 0, 0, 0, 0, 0}, [6]int{1, 1, 1, 1, 1, 1}, true},
			{[6]int{0, 0, 0, 0, 0, 1}, [6]int{1, 1, 1, 1, 1, 0}, true},
			{[6]int{1, 0, 0, 0, 0, 1}, [6]int{0, 1, 1, 1, 1, 0}, true},
			{[6]int{0, 0, 0, 0, 0, 1}, [6]int{0, 1, 1, 1, 1, 0}, false},
		}
		for _, v := range tables {
			Expect(CheckSides(v.a, v.b)).To(Equal(v.x))
		}
	})

	It("should get correct edge", func() {
		tables := []struct {
			side     [6][6]int
			function func([6][6]int) [6]int
			edge     [6]int
		}{
			{[6][6]int{{1, 1, 0, 0, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 0, 1, 0, 1}},
				ExtractTop,
				[6]int{1, 1, 0, 0, 1, 1}},
			{[6][6]int{{1, 1, 0, 0, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 0, 1, 0, 1}},
				ExtractRight,
				[6]int{1, 0, 1, 0, 1, 1}},
			{[6][6]int{{1, 1, 0, 0, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 0, 1, 0, 1}},
				ExtractBottom,
				[6]int{0, 1, 0, 1, 0, 1}},
			{[6][6]int{{1, 1, 0, 0, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 0, 1, 0, 1}},
				ExtractLeft,
				[6]int{1, 1, 0, 0, 1, 0}},
		}
		for _, v := range tables {
			Expect(v.function(v.side)).To(Equal(v.edge))
		}
	})

	It("should test rule 0", func() {
		pieces := [6][6][6]int{{{0, 0, 1, 1, 0, 0},
			{0, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 0},
			{1, 1, 1, 1, 1, 0},
			{0, 1, 1, 1, 1, 1},
			{1, 1, 0, 0, 1, 0}},

			{{0, 1, 0, 1, 0, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 0, 0, 1, 0}},

			{{1, 1, 0, 0, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 0, 1, 1, 0, 0}},

			{{0, 0, 1, 1, 0, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{0, 1, 0, 0, 1, 1}},

			{{0, 0, 1, 1, 0, 0},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 0, 1, 1, 0, 0}},

			{{1, 1, 0, 0, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 0, 1, 0, 1}}}

		// solution := [6][6]int{{0, 0, 1, 1, 0, 0},
		// 	{0, 1, 1, 1, 1, 1},
		// 	{1, 1, 1, 1, 1, 0},
		// 	{0, 1, 1, 1, 1, 0},
		// 	{1, 1, 1, 1, 1, 1},
		// 	{1, 0, 1, 0, 1, 1}}
		x := ApplyRule0(pieces)
		Expect(len(x) == 6).Should(BeTrue())

	})

	It("should rotate side 90 degrees", func() {
		doTestRotate([6][6]int{{1, 1, 0, 0, 1, 1},
			{1, 1, 1, 1, 1, 0},
			{0, 1, 1, 1, 1, 1},
			{0, 1, 1, 1, 1, 0},
			{1, 1, 1, 1, 1, 1},
			{0, 1, 0, 1, 0, 1}},

			[6][6]int{{1, 0, 1, 0, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 0, 0, 1, 0}})
	})

	It("should rotate side 180 degrees", func() {
		doTestRotateTwice([6][6]int{{1, 1, 0, 0, 1, 1},
			{1, 1, 1, 1, 1, 0},
			{0, 1, 1, 1, 1, 1},
			{0, 1, 1, 1, 1, 0},
			{1, 1, 1, 1, 1, 1},
			{0, 1, 0, 1, 0, 1}},

			[6][6]int{{1, 0, 1, 0, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 0, 0, 1, 1}})
	})

	It("should mirror side", func() {
		doTestMirror([6][6]int{{1, 1, 0, 0, 1, 1},
			{1, 1, 1, 1, 1, 0},
			{0, 1, 1, 1, 1, 1},
			{0, 1, 1, 1, 1, 0},
			{1, 1, 1, 1, 1, 1},
			{0, 1, 0, 1, 0, 1}},

			[6][6]int{{1, 1, 0, 0, 1, 1},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 0, 1, 0, 1, 0}})
	})

	It("example puzzle2", func() {
		pieces := [6][6][6]int{{{0, 0, 1, 1, 0, 0},
			{1, 1, 1, 1, 1, 0},
			{0, 1, 1, 1, 1, 1},
			{0, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 0},
			{0, 0, 1, 1, 0, 0}},

			{{1, 1, 0, 0, 1, 1},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 0, 1, 1, 1}},

			{{0, 0, 1, 0, 0, 0},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 0, 0, 1, 0}},

			{{0, 0, 1, 1, 0, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 0, 1, 1, 0, 0}},

			{{0, 0, 1, 1, 0, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 0, 0, 1, 1}},

			{{0, 0, 1, 1, 0, 1},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 0, 0, 1, 1}}}

		Expect(tst(pieces)).To(Equal(true))
	})

	It("example puzzle3", func() {
		pieces := [6][6][6]int{{{0, 0, 1, 1, 0, 0},
			{0, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 0},
			{1, 1, 1, 1, 1, 0},
			{0, 1, 1, 1, 1, 1},
			{1, 1, 0, 0, 1, 0}},

			{{0, 1, 0, 1, 0, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 0, 0, 1, 0}},

			{{1, 1, 0, 0, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 0, 1, 1, 0, 0}},

			{{0, 0, 1, 1, 0, 0},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{0, 1, 0, 0, 1, 1}},

			{{0, 0, 1, 1, 0, 0},
				{0, 1, 1, 1, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 0, 1, 1, 0, 0}},

			{{1, 1, 0, 0, 1, 1},
				{1, 1, 1, 1, 1, 0},
				{0, 1, 1, 1, 1, 1},
				{0, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1},
				{0, 1, 0, 1, 0, 1}}}

		Expect(tst(pieces)).To(Equal(true))
	})
})
